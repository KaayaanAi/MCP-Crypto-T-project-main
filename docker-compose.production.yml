
version: '3.8'

services:
  mcp-crypto-server:
    build:
      context: .
      dockerfile: Dockerfile.2025
      args:
        - VERSION=2.0.0
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: mcp-crypto-trading:2.0.0
    container_name: mcp-crypto-trading
    restart: unless-stopped
    labels:
      - "org.opencontainers.image.title=MCP Crypto Trading Server"
      - "org.opencontainers.image.description=Production-Ready MCP Crypto Trading Analysis Server"
      - "org.opencontainers.image.version=2.0.0"
      - "org.opencontainers.image.vendor=Kaayaan AI"
      - "org.opencontainers.image.licenses=MIT"
      - "org.opencontainers.image.source=https://github.com/kaayaanai/mcp-crypto-trading-project"
      - "org.opencontainers.image.documentation=https://github.com/kaayaanai/mcp-crypto-trading-project/blob/main/README.md"
      - "com.kaayaanai.service=mcp-crypto-server"
      - "com.kaayaanai.environment=production"
      - "com.kaayaanai.version=2.0.0"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/crypto_trading
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - POSTGRES_DSN=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/crypto_trading
      - WHATSAPP_API=${WHATSAPP_API}
      - WHATSAPP_SESSION=${WHATSAPP_SESSION}
      - ENABLE_METRICS=true
      - METRICS_PORT=8080
      - MAX_CONCURRENT_REQUESTS=200
      - CACHE_TTL_SECONDS=300
      - DEFAULT_RISK_PERCENTAGE=2.0
      - MAX_POSITION_SIZE_PERCENTAGE=10.0
    ports:
      - "8080:8080"  # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - kaayaan-network
    depends_on:
      - mongodb
      - redis
      - postgresql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongodb:
    image: mongo:7.0
    container_name: mcp-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: crypto_trading
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-scripts/mongodb:/docker-entrypoint-initdb.d:ro
    networks:
      - kaayaan-network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.2-alpine
    container_name: mcp-redis
    restart: unless-stopped
    command: redis-server --requirepass "${REDIS_PASSWORD}" --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kaayaan-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgresql:
    image: postgres:15-alpine
    container_name: mcp-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_trading
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-scripts/postgresql:/docker-entrypoint-initdb.d:ro
    networks:
      - kaayaan-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d crypto_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - kaayaan-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - kaayaan-network
    depends_on:
      - prometheus

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mcp-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - kaayaan-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mcp-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - kaayaan-network
    depends_on:
      - elasticsearch

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - kaayaan-network
    depends_on:
      - mcp-crypto-server
      - grafana
      - kibana

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  postgresql_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  kaayaan-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16