[build-system]
requires = ["setuptools>=65.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-crypto-trading-project"
version = "2.0.0"
description = "Production-Ready MCP Crypto Trading Analysis Server - Enterprise-grade cryptocurrency trading analysis with real-time market data, technical indicators, and automated trading strategies"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Kaayaan AI", email = "contact@kaayaanai.com" }
]
maintainers = [
    { name = "Kaayaan AI", email = "contact@kaayaanai.com" }
]
keywords = [
    "mcp",
    "crypto",
    "trading",
    "analysis",
    "bitcoin",
    "ethereum",
    "technical-analysis",
    "automated-trading",
    "machine-learning",
    "real-time",
    "api",
    "server",
    "enterprise",
    "production-ready"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Typing :: Typed"
]
requires-python = ">=3.13.0"
dependencies = [
    # Core MCP & Server Framework
    "mcp==1.14.1",
    "pydantic==2.8.2",
    "fastapi==0.112.0",
    "uvicorn[standard]==0.30.0",

    # Async Operations & Networking
    "aiohttp==3.10.3",
    "aiofiles==24.1.0",
    "websockets==13.0.1",

    # Cryptocurrency Data & Analysis
    "pandas==2.2.2",
    "numpy==2.0.1",
    "ccxt==4.3.77",
    "requests==2.32.3",

    # Database Drivers
    "motor==3.5.0",
    "pymongo[srv]==4.8.0",
    "aioredis==2.0.1",
    "asyncpg==0.29.0",

    # Configuration & Environment
    "python-dotenv==1.0.1",
    "pydantic-settings==2.4.0",

    # Logging & Monitoring
    "structlog==24.4.0",
    "loguru==0.7.2",

    # Security & Cryptography
    "cryptography==43.0.0",
    "passlib[bcrypt]==1.7.4",

    # JSON & Data Serialization
    "ujson==5.10.0",
    "orjson==3.10.7",

    # Date & Time Handling
    "python-dateutil==2.9.0.post0",
    "pytz==2024.1",

    # Validation & Type Checking
    "email-validator==2.2.0",
    "validators==0.33.0",

    # Mathematical & Statistical Libraries
    "scipy==1.14.0",
    "scikit-learn==1.5.1",
    "statsmodels==0.14.2",

    # Utilities & Helpers
    "click==8.1.7",
    "rich==13.7.1",
    "tqdm==4.66.5",

    # Container Utilities
    "docker==7.1.0",

    # Performance Optimizations
    "uvloop==0.20.0",
    "cachetools==5.4.0",

    # Production Monitoring & Observability
    "prometheus-client==0.21.0",
    "sentry-sdk[fastapi]==2.12.0"
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.2",
    "pytest-asyncio==0.23.8",
    "black==24.8.0",
    "mypy==1.11.1",
    "ruff==0.6.2",
    "pre-commit>=3.0.0"
]
test = [
    "pytest==8.3.2",
    "pytest-asyncio==0.23.8",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0"
]
technical-analysis = [
    "ta-lib==0.4.32"
]
all = [
    "mcp-crypto-trading-project[dev,test,technical-analysis]"
]

[project.urls]
Homepage = "https://github.com/kaayaanai/mcp-crypto-trading-project"
Documentation = "https://github.com/kaayaanai/mcp-crypto-trading-project/blob/main/README.md"
Repository = "https://github.com/kaayaanai/mcp-crypto-trading-project.git"
"Bug Tracker" = "https://github.com/kaayaanai/mcp-crypto-trading-project/issues"
Changelog = "https://github.com/kaayaanai/mcp-crypto-trading-project/releases"
"Source Code" = "https://github.com/kaayaanai/mcp-crypto-trading-project"

[project.scripts]
mcp-crypto-server = "mcp_server:main"
mcp-crypto-standalone = "mcp_server_standalone:main"
mcp-crypto-enterprise = "mcp_enterprise_server:main"
mcp-crypto-http = "mcp_http_server:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
namespaces = false

[tool.setuptools.package-data]
"*" = ["*.toml", "*.yml", "*.yaml", "*.json", "*.md", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
line-length = 88
target-version = "py313"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]